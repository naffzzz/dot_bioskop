// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using dot_bioskop.DBContexts;

namespace dot_bioskop.Migrations
{
    [DbContext(typeof(MyDBContext))]
    partial class MyDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("dot_bioskop.Models.movie_schedules", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("end_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("movie_id")
                        .HasColumnType("bigint");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<string>("start_time")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<long>("studio_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_movie_schedules");

                    b.HasIndex("movie_id");

                    b.HasIndex("studio_id");

                    b.ToTable("movie_schedules");
                });

            modelBuilder.Entity("dot_bioskop.Models.movie_tags", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<long>("movie_id")
                        .HasColumnType("bigint");

                    b.Property<long>("tag_id")
                        .HasColumnType("bigint");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_movie_tags");

                    b.HasIndex("movie_id");

                    b.HasIndex("tag_id");

                    b.ToTable("movie_tags");
                });

            modelBuilder.Entity("dot_bioskop.Models.movies", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("overview")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("play_until")
                        .HasColumnType("datetime");

                    b.Property<string>("poster")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_movies");

                    b.ToTable("movies");
                });

            modelBuilder.Entity("dot_bioskop.Models.order_items", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<long>("movie_schedule_id")
                        .HasColumnType("bigint");

                    b.Property<long>("order_id")
                        .HasColumnType("bigint");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<int>("qty")
                        .HasColumnType("int");

                    b.Property<double>("sub_total_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_order_items");

                    b.HasIndex("movie_schedule_id");

                    b.HasIndex("order_id");

                    b.ToTable("order_items");
                });

            modelBuilder.Entity("dot_bioskop.Models.orders", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("payment_method")
                        .IsRequired()
                        .HasColumnType("enum('0','1')");

                    b.Property<double>("total_item_price")
                        .HasColumnType("double");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.Property<long>("user_id")
                        .HasColumnType("bigint");

                    b.HasKey("id")
                        .HasName("PK_orders");

                    b.HasIndex("user_id");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("dot_bioskop.Models.studios", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<int>("seat_capacity")
                        .HasColumnType("int");

                    b.Property<int>("studio_number")
                        .HasColumnType("int");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_studios");

                    b.ToTable("studios");
                });

            modelBuilder.Entity("dot_bioskop.Models.tags", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_tags");

                    b.ToTable("tags");

                    b.HasData(
                        new
                        {
                            id = 1L,
                            created_at = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Horror"
                        },
                        new
                        {
                            id = 2L,
                            created_at = new DateTime(2022, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            name = "Comedy"
                        });
                });

            modelBuilder.Entity("dot_bioskop.Models.users", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("MySql:ValueGenerationStrategy", MySqlValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("created_at")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("deleted_at")
                        .HasColumnType("datetime");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("is_admin")
                        .HasColumnType("bool");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("password")
                        .IsRequired()
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("updated_at")
                        .HasColumnType("datetime");

                    b.HasKey("id")
                        .HasName("PK_users");

                    b.ToTable("users");
                });

            modelBuilder.Entity("dot_bioskop.Models.movie_schedules", b =>
                {
                    b.HasOne("dot_bioskop.Models.movies", "movie")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.studios", "studio")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.movies", null)
                        .WithMany()
                        .HasForeignKey("movie_id")
                        .HasConstraintName("FK_movie_schedules_movies")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.studios", null)
                        .WithMany()
                        .HasForeignKey("studio_id")
                        .HasConstraintName("FK_movie_schedules_studios")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("studio");
                });

            modelBuilder.Entity("dot_bioskop.Models.movie_tags", b =>
                {
                    b.HasOne("dot_bioskop.Models.movies", "movie")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.tags", "tag")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.movies", null)
                        .WithMany()
                        .HasForeignKey("movie_id")
                        .HasConstraintName("FK_movie_tags_movies")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.tags", null)
                        .WithMany()
                        .HasForeignKey("tag_id")
                        .HasConstraintName("FK_movie_tags_tags")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("movie");

                    b.Navigation("tag");
                });

            modelBuilder.Entity("dot_bioskop.Models.order_items", b =>
                {
                    b.HasOne("dot_bioskop.Models.movie_schedules", "movie_schedule")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.orders", "order")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.movie_schedules", null)
                        .WithMany()
                        .HasForeignKey("movie_schedule_id")
                        .HasConstraintName("FK_order_items_movie_schedules")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.orders", null)
                        .WithMany()
                        .HasForeignKey("order_id")
                        .HasConstraintName("FK_order_items_orders")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("movie_schedule");

                    b.Navigation("order");
                });

            modelBuilder.Entity("dot_bioskop.Models.orders", b =>
                {
                    b.HasOne("dot_bioskop.Models.users", "user")
                        .WithMany()
                        .HasForeignKey("id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("dot_bioskop.Models.users", null)
                        .WithMany()
                        .HasForeignKey("user_id")
                        .HasConstraintName("FK_orders_users")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("user");
                });
#pragma warning restore 612, 618
        }
    }
}
